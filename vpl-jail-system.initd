#!/bin/bash
#
# Startup script for vpl-jail-system
#
# author:     Juan Carlos Rodriguez-del-Pino <jcrodriguez@dis.ulpgc.es>
# chkconfig:  345 99 36
# description: Virtual Programming Lab jail is a sandbox to compile \
#              and execute programs. vpl-jail-server receive the code\
#              and execution restrictions and return \
#              the results to  the client. \
#              This script build jail filesystem and start \
#              or stop the vpl-jail-server.
# processname: vpl-jail-system
#
### BEGIN INIT INFO
# Provides:       vpl-jail-system
# Required-Start: $network
# Required-Stop:  $network
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# Short-Description: VPL for Moodle jail service
# Description: build jail filesystem and start or stop the vpl-jail-server
### END INIT INFO

# Jail filesystem structure
# $JAILPATH____ dev   #fake with minimum files
#          |     |___ pts #Replicate original
#          |___ etc   #fake with own passwd and group
#          |     |___ subdirs  #Replicate readonly dir by mount --bind
#          |          except
#          |___ home  #dir to create apropiate prisoner home dir
#          |___ tmp   #tmp of jail filesystem 
#          |___ proc  #Real dir by mount --bind
#          |___ usr   #Replicate readonly dir by mount --bind
#          |___ bin   #Replicate readonly dir by mount --bind
#          |___ lib   #Replicate readonly dir by mount --bind
#          |___ lib64 #Replicate readonly dir by mount --bind
#          |___ var   #dir for replicate subdirs
#                |___ lib       #Replicate readonly dir by mount --bind

# load init.d common functions
. /lib/lsb/init-functions

LOGFILE=/etc/vpl/vpl-jail-service.log
DEAMON=/etc/vpl/vpl-jail-server
PIDFILE=/var/run/vpl-jail-server.pid
NOMOUNT="^vpl|^init|^ldap|^udev|grub|^rc[0-6S]|^pam|^cron|^apm|^logrotate"
NOMOUNT="$NOMOUNT|^mail|^rsyslog|^security|^ssl|^ssh|^update"
create_check_dir() {
	if [ ! -d "$1" ] ; then
		mkdir "$1"
	fi
	if [ -d "$1" ] ; then
		chmod $2 "$1"
	else
		log_failure_msg $"Can't mkdir $1"
		exit 1
	fi
}

set_etc() {
	create_check_dir "$JAILPATH/etc" 755
	#passwd file
	PASSWORDFILE="$JAILPATH/etc/passwd"
	echo "root:*:0:0:root:/root:/bin/bash" > "$PASSWORDFILE"
	for (( I=$MIN_PRISONER_UGID ; $I < $MAX_PRISONER_UGID ; I+=1 )) ; do
		echo "p$I:*:$I:$I:prisoner $I:/home/p$I:/bin/bash" >> "$PASSWORDFILE"
	done
	chmod 644 "$PASSWORDFILE"
	#group file
	GROUPFILE="$JAILPATH/etc/group"
	echo "root:*:0:root" > "$GROUPFILE"
	for (( I=$MIN_PRISONER_UGID ; $I < $MAX_PRISONER_UGID ; I+=1 )) ; do
		echo "p$I:*:$I:p$I" >> "$GROUPFILE"
	done
	chmod 644 "$GROUPFILE"
	cp -p /etc/ld.so.conf  "$JAILPATH/etc"
	cp -p /etc/ld.so.cache  "$JAILPATH/etc"
	cp -p /etc/hosts  "$JAILPATH/etc"
	chmod a-s "$JAILPATH/etc/ld.so.conf"
	chmod a-s "$JAILPATH/etc/ld.so.cache"
	for DIR in $(ls -d /etc/*)
	do
		DIRNAME=$(basename "$DIR")
		echo "$DIRNAME" | grep -q -E "$NOMOUNT"
		if [ $? = 1 -a -d $DIR ] ; then
			set_other $DIR
		fi
	done
	#Copy /etc/*.conf files
	for CONF in $(ls -f /etc/*.conf)
	do
		CONFNAME=$(basename "$CONF")
		echo "$CONFNAME" | grep -q -E "$NOMOUNT"
		if [ $? = 1 -a -f $CONF ] ; then
			cp -a -L $CONF  "$JAILPATH/etc/$CONFNAME"
			chmod a-x "$JAILPATH/etc/$CONFNAME"
		fi
	done
}

unset_etc() {
	for DIR in $(ls -d /etc/*)
	do
		if [ -d $DIR -a -d "$JAILPATH$DIR" ] ; then
			unset_other $DIR
		fi
	done
	rm $JAILPATH/etc/*
}

create_device() {
	if [ -f "$1" ] ; then
		rm "$1"
	fi
	mknod "$1" c $2 $3
	chmod 666 "$1"
}

set_dev() {
	DEVPATH="$JAILPATH/dev"
	create_check_dir "$DEVPATH" 755
	create_device "$DEVPATH/null" 1 3
	create_device "$DEVPATH/zero" 1 5
	create_device "$DEVPATH/full" 1 7
	create_device "$DEVPATH/random" 1 8
	create_device "$DEVPATH/urandom" 1 9
	create_device "$DEVPATH/tty" 5 0
	create_device "$DEVPATH/ptmx" 5 2
	ln -s /proc/sef/fd/0 $DEVPATH/stdin
	ln -s /proc/sef/fd/1 $DEVPATH/stdout
	ln -s /proc/sef/fd/2 $DEVPATH/stderr
	set_other_noro /dev/pts
}

unset_dev() {
	DEVPATH="$JAILPATH/dev"
	unset_other /dev/pts
	rm $DEVPATH/*
}

set_tmp() {
	rm -Rf $JAILPATH/tmp
	create_check_dir "$JAILPATH/tmp" 1777
	create_check_dir "$JAILPATH/tmp/.X11-unix" 1777
}

set_home() {
	create_check_dir "$JAILPATH/home" 0711
	rm -Rf $JAILPATH/home/*
}

set_other_noro() {
	if [ -d $1 ] ; then
		create_check_dir "$JAILPATH$1" 0755
		mount --bind $1 "$JAILPATH$1"
		mount -o remount,nosuid,bind "$JAILPATH$1"
	fi
}

set_other() {
	if [ -d $1 ] ; then
		create_check_dir "$JAILPATH$1" 0755
		mount --bind $1 "$JAILPATH$1"
		mount -o remount,ro,nosuid,bind "$JAILPATH$1"
	fi
}

unset_other() {
	if [ -d $1 -a -d "$JAILPATH$1" ] ; then
		umount "$JAILPATH$1"
		rmdir "$JAILPATH$1"
	fi
}

set_others() {
	set_other /bin
	set_other /usr
	set_other /lib
	set_other /lib64
	create_check_dir "$JAILPATH/var" 0755
	set_other /var/lib
	set_other /proc
}

unset_others() {
	unset_other /bin
	unset_other /usr
	unset_other /lib
	unset_other /lib64
	unset_other /var/lib
	if [ -d $DIR ] ; then
		rmdir "$JAILPATH/var"
	fi
	unset_other /proc
}

start(){
	if [ -f $PIDFILE ] ; then
		stop
	fi
	{
		create_check_dir "$JAILPATH" 0755
		set_etc
		set_dev
		set_tmp
		set_home
		set_others
	} 2>> $LOGFILE
	start_daemon /etc/vpl/vpl-jail-server $1 $2
	sleep 1
	if [ -f $PIDFILE ] ; then
		log_success_msg $"Starting vpl-jail-system service:"
	else
		log_failure_msg $"Daemon not started"
	fi
}

stop(){
	{
		killproc /etc/vpl/vpl-jail-server 15
		if [ -f $PIDFILE ] ; then
			rm $PIDFILE
		fi
		unset_etc
		unset_dev
		unset_others
	} 2>> $LOGFILE
	log_success_msg $"Stopping vpl-jail-system service:"
}

VPLJAIL_INSTALL_DIR=/etc/vpl
CONFIG_FILE="$VPLJAIL_INSTALL_DIR/vpl-jail-system.conf"
#Load config file
if [ -f "$CONFIG_FILE" ]; then
	. "$CONFIG_FILE"
else
	log_failure_msg $"vpl-jail-system config file not found: $CONFIG_FILE"
	exit 1
fi

#Check $JAILPATH not been "/"
if [ -f "$JAILPATH" ] ; then
	log_failure_msg $"vpl-jail-system jail path error '$JAILPATH'"
	exit 1
fi
echo "===== vpl-jail-system ====== $1 $2 $3" >> $LOGFILE
date >> $LOGFILE
case "$1" in
  start)
        start $2 $3
        ;;
  stop)
        stop
        ;;
  restart)
        stop
        start
        ;;
  force-reload)
        stop
        start
        ;;
  status)
        pidofproc /etc/vpl/vpl-jail-server
	    exit $? 
        ;;
*)
        log_failure_msg $"Usage: vpl-jail-system {start|stop|restart|force-reaload|status}"
        exit 1
esac
exit 0
