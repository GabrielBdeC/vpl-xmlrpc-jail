#!/bin/bash
# package:		Part of vpl-jail-system
# copyright:    Copyright (C) 2014 Juan Carlos Rodriguez-del-Pino
# license:      GNU/GPL, see LICENSE.txt or http://www.gnu.org/licenses/gpl.txt
# Description:  Script to install vpl-jail-system (Ubuntu 12 and CentOS)
echo "INSTALLING VPL-JAIL-SYSTEM"
echo "=========================="
LOGFILE=installation.log
date >$LOGFILE
exec &> >(tee $LOGFILE)

if [ "$USER" != "root" ] ; then
    echo "This script need to be run as root and is run as $USER"
    exit 1;
fi
#Detect system
if [ -f /sbin/chkconfig  ] && [ "$(command -v yum)" != "" ] ; then
	echo "Detected RedHat or similar distribution (using chkconfig)" 
    function vpl_install_base {
        yum -y install $1 >>$LOGFILE
        return $?
    }
    function vpl_install_check {
        yum list $1 &> /dev/null
        return $?
	}
    LSYSTEM="1"
else
	if [ -f /usr/sbin/update-rc.d ] && [ "$(command -v apt-get)" != "" ] ; then
		echo "Detected Ubuntu or similar distribution (using update-rc.d)"
		echo "Updating distribution software DB"
		apt-get update >>$LOGFILE
	    function vpl_install_base {
            apt-get -q -y --allow-unauthenticated install $1 >>$LOGFILE
            return $?
	    }
	    function vpl_install_check {
            apt-cache pkgnames $1 | grep -q -x -F $1
            return $?
	    }
    	LSYSTEM="2"
    else
    	echo "Sorry can't detect system type"
    	exit 1
	fi
fi
function vpl_install {
	local found=1
	local checked=""
	echo -n "Installing $1: "
	shift
	while [ "$#" != "0" ] ; do
		checked="$checked $1"
   		vpl_install_check $1
		if [ $? -eq 0 ] ; then
	   	   echo -n $1
	       vpl_install_base $1
	   	   if [ $? -eq 0 ] ; then
	   	   		echo " [OK]"
	   	   else
	   	   		echo " [ERROR]"
	   	   fi
	       found=0
	       break
   	   fi
       shift
   done
   if [ $found -eq 1 ] ; then
   	   echo "[Package not found. Checked $checked"
   fi
}

function vpl_installq {
   echo -n "Do you want to install $1 (y/n) "
   A="y"
   read A
   if [ "$A" == "y" ] ; then
        vpl_install $@
   fi
}

function vpl_generate_selfsigned_certificate {
	local A=""
	local HNAMEW=$(hostname --long| sed 's/^[^\.]*/\*/g')
	local HNAME=$(hostname --long)
	local INAME
	echo "Generating self-signed SSL certificate for $HNAME machine"
	#Get host name to generate the certificate
	echo -n "Do you want a certificate with wildcard for a set of servers ($HNAMEW)? (y/n)"
	read A
	if [ "$A" == "y" ] ; then
		INAME=$HNAMEW
	else
		INAME=$HNAME
	fi
	if [ "$INAME" = "" ] ; then
		INAME=localhost
	fi
	#Generate key
	openssl genrsa -passout pass:12345678 -des3 -out key.pem 1024
	#Generate certificate for this server
	echo -n "Do you want to customize the certificate info? (y/n)"
	read A
	if [ "$A" == "y" ] ; then
		openssl req -new -key key.pem -out certini.pem -passin pass:12345678
	else
		local SUBJ="/C=ES/ST=State/L=Location/O=VPL/OU=Execution server/CN=$INAME"
		openssl req -new -subj "$SUBJ" -key key.pem -out certini.pem -passin pass:12345678
	fi
	#Remove key password
	cp key.pem keyini.pem
	openssl rsa -in keyini.pem -out key.pem -passin pass:12345678
	#Generate self signed certificate for 5 years
	openssl x509 -in certini.pem -out cert.pem -req -signkey key.pem -days 1826 
}
echo "Installation log file => $LOGFILE"
echo "Preparing the installation"
if [ "$LSYSTEM" == "1" ] ; then
	vpl_install "LSB core" redhat-lsb-core
	vpl_install "make" make
	vpl_install "C compiler" gcc
	vpl_install "C++ compiler" gcc-c++
	vpl_install "SSL library" openssl
	vpl_install "SSL library" openssl-devel
	vpl_install "Firewall" iptables
	vpl_install "Window manager" metacity
	vpl_install "xterm" xterm
	vpl_install "VNC server" tigervnc-server
	vpl_install "Web browser" firefox
else
	vpl_install "make" make
	vpl_install "C++ compiler" g++
	vpl_install "SSL library" openssl
	vpl_install "SSL library" libssl-dev
	vpl_install "Firewall" iptables
	vpl_install "X system" xorg
	vpl_install "VNC server" tightvncserver
	vpl_install "Fonts" xfonts-75dpi
	vpl_install "Fonts" xfonts-100dpi
	vpl_install "Window manager" openbox
	vpl_install "Configuration DB system" gconf2
	gconftool-2 --direct --config-source xml:readwrite:/etc/gconf/gconf.xml.defaults -t string --set /apps/metacity/general/theme Redmond
	vpl_install "Web browser" firefox
fi
echo "Checking installed software"
./configure >>$LOGFILE
echo "Compiling vpl-jail-server"
make >>$LOGFILE
VPLJAIL_INSTALL_DIR=/etc/vpl
if [ -d $VPLJAIL_INSTALL_DIR ] ; then
    echo "Updating installation => $VPLJAIL_INSTALL_DIR"
	#Stop service
	service vpl-jail-system stop >>$LOGFILE
else
	echo "Installing => $VPLJAIL_INSTALL_DIR"
    mkdir $VPLJAIL_INSTALL_DIR
fi
#Copy daemon 
cp src/vpl-jail-server $VPLJAIL_INSTALL_DIR
#Copy configuration file
cp -i vpl-jail-system.conf $VPLJAIL_INSTALL_DIR
chmod 600 $VPLJAIL_INSTALL_DIR/vpl-jail-system.conf
#Copy launch scripts
cp vpl_*.sh /etc/vpl
chmod +x /etc/vpl/*.sh
#Copy service script
cp vpl-jail-system.initd /etc/init.d/vpl-jail-system
chmod +x /etc/init.d/vpl-jail-system
#create default control dir
if [ ! -d /var/vpl-jail-system ] ; then
	mkdir /var/vpl-jail-system
fi
chmod 0600 /var/vpl-jail-system
if [ ! -f $VPLJAIL_INSTALL_DIR/cert.pem ] ; then
	echo "VPL execution server needs SSL certificates to accept https:"
	echo "and wss: requests."
	echo "If you have certificates then copy the key and the certificate file"
	echo "in pem format to $VPLJAIL_INSTALL_DIR/key.pem and $VPLJAIL_INSTALL_DIR/cert.pem"
	echo "If you don't have certificate the intaller can generate one selfsigned for you"
	echo -n "Generate the certificate?"
    read A
    if [ "$A" != "n" ] ; then
		vpl_generate_selfsigned_certificate
		cp key.pem $VPLJAIL_INSTALL_DIR
		cp cert.pem $VPLJAIL_INSTALL_DIR
		chmod 600 $VPLJAIL_INSTALL_DIR/*.pem
		rm key.pem keyini.pem certini.pem cert.pem
	fi
else
	echo "Found SSL certificate => Don't create a new one"
fi
if [ "$LSYSTEM" = "1" ] ; then
	#Add service
    chkconfig --add vpl-jail-system
    echo "Do you want to install development software? (C, C++, Java, etc.) (y/n)"
    read A
    if [ "$A" != "n" ] ; then
        vpl_install "Ada compiler (GNU)" gcc-gnat
        vpl_install "Assembler" nasm
        vpl_install "C compiler (GNU)" gcc
        vpl_install "Fortran compiler (GNU)" gcc-gfortran
        vpl_install "General purpose debugger (GNU)" gdb
        vpl_install "Java (OpenJDK)" java-1.8.0-openjdk-devel java-1.7.0-openjdk-devel
        vpl_install "Junit framework" junit
        vpl_install "Perl interpreter" perl
        vpl_install "PHP interpreter" php-cli
        vpl_install "Prolog" pl
        vpl_install "Python interpreter" python
        vpl_install "Ruby interpreter" ruby
        vpl_install "SQL interpreter" sqlite
        vpl_install "TCL interpreter" tcl
        vpl_install "Valgrind tool" valgrind
    fi
    echo "IMPORTANT: Please, set properly the ENVPATH in the config file /etc/vpl/vpl-jail-system.conf" 
    echo "           e.g. \"ENVPATH=/usr/bin:/bin\" and restart the service"
else
    update-rc.d -f vpl-jail-system remove >>$LOGFILE
    update-rc.d vpl-jail-system defaults >>$LOGFILE
    echo "Do you want to install development software?"
    echo "  (Ada, Assambler, C, C++, C#, DDD, Fortran, gdb, Haskell, Java, "
    echo "   JUnit, Node.js, Octave, Pascal, Perl, PHP, Python, Ruby, Scala,"
    echo "   Scheme, TCL, valgrind)"
    echo -n "(y/n)"
    read A1
    echo "Do you want to install other development software?"
    echo "  (Clisp, Clojure, Cobol, CoffeScript, D, Erlang, Go, Haxe, JQuery,"
    echo "   Lua, R, Xquery, VHDL)"
    echo -n "(y/n)"
    read A2
    if [ "$A1" != "n" ] ; then
    	echo "This installation may take a long time"
        vpl_install "Ada compiler (GNU)" gnat
        vpl_install "Assembler" nasm
        vpl_install "C compiler (GNU)" gcc
        vpl_install "C# development framework (mono)" mono-complete
        vpl_install "DDD graphical front end debugger (GNU)" ddd
        vpl_install "Fortran compiler (GNU)" gfortran
        vpl_install "General purpose debugger (GNU)" gdb
        vpl_install "Haskell 98 interpreter" hugs
        vpl_install "Java (OpenJDK)" default-jdk openjdk-7-jdk
        vpl_install "Java Checkstyle" checkstyle
        vpl_install "Junit framework" junit4 junit
        vpl_install "JavaScript (Node.js)" nodejs
        vpl_install "Octave (GNU)" octave
        vpl_install "Pascal compiler" fp-compiler
        vpl_install "Perl interpreter" perl
        vpl_install "PHP interpreter" php-cli php5-cli
        vpl_install "Sqlite for PHP" php-sqlite3 php5-sqlite
        vpl_install "Prolog" swi-prolog
        vpl_install "Python interpreter" python pydb python-tk
        vpl_install "Python pydb" pydb
        vpl_install "Python tk" python-tk
        vpl_install "Ruby interpreter" ruby
        vpl_install "Scala programming language" scala
        vpl_install "Scheme interpreter" plt-scheme
        vpl_install "SQL interpreter" sqlite3
        vpl_install "TCL interpreter" tcl
        vpl_install "Valgrind tool" valgrind
    fi
    if [ "$A2" != "n" ] ; then
    	echo "This installation may take a long time"
    	vpl_install "Clisp" clisp
        vpl_install "Clojure" clojure1.6 clojure1.4
        vpl_install "Cobol" open-cobol
        vpl_install "CoffeeScript" coffeescript
        vpl_install "D compiler (GNU)" gdc
        vpl_install "Erlang" erlang
        vpl_install "Go programming language compiler" golang
        vpl_install "Haxe programming language" haxe
        vpl_install "JQuery JavaScript Lib" libjs-jquery
        vpl_install "JQuery-UI JavaScript Lib" libjs-jquery-ui 
        vpl_install "Lua compiler 5.1" lua5.1
        vpl_install "R statistical computation and graphics system (GNU)" r-base
        vpl_install "XQuery interpreter" galax
        vpl_install "VHDL compiler" freehdl
        #vpl_install "Groovy programming language" groovy
    fi
    if [ -f /etc/init.d/apache2 ] ; then
    	echo "If you are planning to use apache2 or other service in this system,"
    	echo "beware that you must use differents port that in vpl-jail-system"
    	echo "It seems that you have apache2 in your system."
	    echo -n "Remove apache2 ? (y/n) "
    	read A
    	if [ "$A" == "y" ] ; then
        	#remove apache2
        	echo "Removing apache2"
        	rm /etc/init.d/apache2 >/dev/null 2>&1
        	update-rc.d apache2 remove
    	fi
    fi
fi
echo "Starting the service (vpl-jail-system)"
service vpl-jail-system start

